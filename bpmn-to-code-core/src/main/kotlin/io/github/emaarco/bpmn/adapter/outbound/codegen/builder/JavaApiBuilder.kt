package io.github.emaarco.bpmn.adapter.outbound.codegen.builder

import com.palantir.javapoet.FieldSpec
import com.palantir.javapoet.JavaFile
import com.palantir.javapoet.TypeSpec
import io.github.emaarco.bpmn.adapter.outbound.codegen.WriteApiFileAdapter
import io.github.emaarco.bpmn.domain.BpmnModelApi
import io.github.emaarco.bpmn.domain.shared.VariableMapping
import javax.lang.model.element.Modifier

class JavaApiBuilder : WriteApiFileAdapter.ApiFileBuilder {

    override fun buildApiFile(modelApi: BpmnModelApi) = with(modelApi.model) {

        val className = modelApi.fileName()
        val rootClassBuilder = TypeSpec.classBuilder(className)
            .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
            .addField(
                FieldSpec.builder(String::class.java, "PROCESS_ID")
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer("\$S", processId)
                    .build()
            )

        val elementsClassBuilder = TypeSpec.classBuilder("Elements")
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
        flowNodes.forEach { flowNode -> buildAttribute(elementsClassBuilder, flowNode) }
        rootClassBuilder.addType(elementsClassBuilder.build())

        val messagesClassBuilder = TypeSpec.classBuilder("Messages")
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
        messages.forEach { message -> buildAttribute(messagesClassBuilder, message) }
        rootClassBuilder.addType(messagesClassBuilder.build())

        val typesClassBuilder = TypeSpec.classBuilder("TaskTypes")
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
        serviceTasks.forEach { type -> buildAttribute(typesClassBuilder, type) }
        rootClassBuilder.addType(typesClassBuilder.build())

        val javaFile = JavaFile.builder(modelApi.packagePath, rootClassBuilder.build())
            .addFileComment("Generated by BpmnModelGeneratorPlugin")
            .build()

        javaFile.writeTo(modelApi.outputFolder)
        println("Generated: $className.java")
    }

    private fun buildAttribute(
        builder: TypeSpec.Builder,
        variable: VariableMapping,
    ) = builder.addField(
        FieldSpec.builder(String::class.java, variable.getName())
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
            .initializer("\$S", variable.getValue())
            .build()
    )
}