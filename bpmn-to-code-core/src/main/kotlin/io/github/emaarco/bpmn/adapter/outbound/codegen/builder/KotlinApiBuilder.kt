package io.github.emaarco.bpmn.adapter.outbound.codegen.builder

import com.squareup.kotlinpoet.*
import io.github.emaarco.bpmn.adapter.outbound.codegen.WriteApiFileAdapter
import io.github.emaarco.bpmn.domain.BpmnModelApi
import io.github.emaarco.bpmn.domain.shared.VariableMapping

class KotlinApiBuilder : WriteApiFileAdapter.ApiFileBuilder {

    override fun buildApiFile(modelApi: BpmnModelApi) = with(modelApi.model) {

        val objectName = modelApi.fileName()
        val unusedAnnotation = AnnotationSpec.builder(Suppress::class).addMember("%S", "unused").build()
        val rootObjectBuilder = TypeSpec.objectBuilder(objectName).addAnnotation(unusedAnnotation)
        val fileSpecBuilder = FileSpec.builder(modelApi.packagePath, objectName)
            .addFileComment("Generated by BpmnModelGeneratorPlugin")

        // Add process ID
        val idProperty = PropertySpec.builder("PROCESS_ID", String::class).initializer("\"$processId\"").build()
        rootObjectBuilder.addProperty(idProperty)

        val elementsObjectBuilder = TypeSpec.objectBuilder("Elements")
        flowNodes.forEach { flowNode -> buildAttribute(elementsObjectBuilder, flowNode) }
        rootObjectBuilder.addType(elementsObjectBuilder.build())

        // Nested Messages object
        val messagesObjectBuilder = TypeSpec.objectBuilder("Messages")
        messages.forEach { message -> buildAttribute(messagesObjectBuilder, message) }
        rootObjectBuilder.addType(messagesObjectBuilder.build())

        val typesObjectBuilder = TypeSpec.objectBuilder("TaskTypes")
        serviceTasks.forEach { type -> buildAttribute(typesObjectBuilder, type) }
        rootObjectBuilder.addType(typesObjectBuilder.build())

        // Build and write file
        fileSpecBuilder.addType(rootObjectBuilder.build()).addAnnotation(unusedAnnotation)
        val fileSpec = fileSpecBuilder.build()

        fileSpec.writeTo(modelApi.outputFolder)
        println("Generated: $objectName.kt")
    }

    private fun buildAttribute(
        builder: TypeSpec.Builder,
        variable: VariableMapping,
    ) = builder.addProperty(
        PropertySpec.builder(variable.getName(), String::class)
            .addModifiers(KModifier.PUBLIC)
            .initializer("\"${variable.getValue()}\"")
            .build()
    )
}
