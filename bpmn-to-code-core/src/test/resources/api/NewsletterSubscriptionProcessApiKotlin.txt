// Generated by bpmn-to-code
@file:Suppress("unused")

package de.emaarco.example

import kotlin.String
import kotlin.Suppress

@Suppress("unused")
object NewsletterSubscriptionProcessApiV1 {
  val PROCESS_ID: String = "newsletterSubscription"

  object Elements {
    val Timer_EveryDay: String = "Timer_EveryDay"

    val Timer_After3Days: String = "Timer_After3Days"

    val ErrorEvent_InvalidMail: String = "ErrorEvent_InvalidMail"

    val Activity_ConfirmRegistration: String = "Activity_ConfirmRegistration"

    val SubProcess_Confirmation: String = "SubProcess_Confirmation"

    val EndEvent_RegistrationAborted: String = "EndEvent_RegistrationAborted"

    val EndEvent_SubscriptionConfirmed: String = "EndEvent_SubscriptionConfirmed"

    val EndEvent_RegistrationCompleted: String = "EndEvent_RegistrationCompleted"

    val EndEvent_RegistrationNotPossible: String = "EndEvent_RegistrationNotPossible"

    val Activity_AbortRegistration: String = "Activity_AbortRegistration"

    val Activity_SendWelcomeMail: String = "Activity_SendWelcomeMail"

    val Activity_SendConfirmationMail: String = "Activity_SendConfirmationMail"

    val StartEvent_SubmitRegistrationForm: String = "StartEvent_SubmitRegistrationForm"

    val StartEvent_RequestReceived: String = "StartEvent_RequestReceived"
  }

  object Messages {
    val Message_FormSubmitted: String = "Message_FormSubmitted"

    val Message_SubscriptionConfirmed: String = "Message_SubscriptionConfirmed"
  }

  object TaskTypes {
    val EndEvent_RegistrationCompleted: String = "newsletter.registrationCompleted"

    val Activity_AbortRegistration: String = "newsletter.abortRegistration"

    val Activity_SendWelcomeMail: String = "newsletter.sendWelcomeMail"

    val Activity_SendConfirmationMail: String = "newsletter.sendConfirmationMail"
  }

  object Timers {
    val Timer_EveryDay: BpmnTimer = BpmnTimer("Duration", "PT1M")

    val Timer_After3Days: BpmnTimer = BpmnTimer("Duration", "\${testVariable}")

    data class BpmnTimer(
      val type: String,
      val timerValue: String,
    )
  }

  object Errors {
    val Error_InvalidMail: BpmnError = BpmnError("Error_InvalidMail", "500")

    data class BpmnError(
      val name: String,
      val code: String,
    )
  }

  object Signals {
    val Signal_RegistrationNotPossible: String = "Signal_RegistrationNotPossible"
  }
}
